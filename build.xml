<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE project>
<project>

	<property file="build.properties" />

	<target name="lombok">
		<propertyfile file="lombok.config" jdkproperties="true">
			<entry key="config.stopBubbling" value="true" />
			<entry key="lombok.addLombokGeneratedAnnotation" value="true" />
		</propertyfile>
	</target>

	<target name="jarbundler">
		<mkdir dir="${project.build.directory}/jarbundler" />
		<jarbundler vmoptions="${mac.vmoptions}" dir="${project.build.directory}/jarbundler" name="${project.name}" mainclass="${mainClass}" startonmainthread="true" version="${project.version}" icon="${project.build.iconsSourceDirectory}/mac/${mac.build.finalName}.icns" usejavaxkey="true" jvmversion="${maven.compiler.target}+" stubfile="${project.build.binSourceDirectory}/mac/universalJavaApplicationStub" highresolutioncapable="true">
			<jarfileset dir="${project.build.directory}" includes="*.${project.packaging},${dependencies.directory}/*.jar" />
		</jarbundler>
	</target>

	<target name="launch4j">
		<echo level="debug" message="os.name: ${os.name}" />
		<echo level="debug" message="os.version: ${os.version}" />
		<echo level="debug" message="os.arch: ${os.arch}" />

		<taskdef name="launch4j" classname="net.sf.launch4j.ant.Launch4jTask" classpath="${launch4j.directory}/launch4j.jar:${launch4j.directory}/lib/xstream.jar" />
		<condition property="launch4j.bindir" value="${launch4j.directory}/bin/win32">
			<and>
				<os family="windows" />
				<available file="${launch4j.directory}/bin/win32" type="dir" />
			</and>
		</condition>
		<condition property="launch4j.bindir" value="${launch4j.directory}/bin/macosx-x86">
			<and>
				<os family="mac" />
				<available file="${launch4j.directory}/bin/macosx-x86" type="dir" />
			</and>
		</condition>
		<condition property="launch4j.bindir" value="${launch4j.directory}/bin/linux">
			<and>
				<os name="linux" />
				<os arch="i386" />
				<available file="${launch4j.directory}/bin/linux" type="dir" />
			</and>
		</condition>
		<condition property="launch4j.bindir" value="${launch4j.directory}/bin/linux-x64">
			<and>
				<os name="linux" />
				<os arch="amd64" />
				<available file="${launch4j.directory}/bin/linux-x64" type="dir" />
			</and>
		</condition>
		<condition property="launch4j.bindir" value="${launch4j.directory}/bin/linux-armhf">
			<and>
				<os name="linux" />
				<os arch="arm" />
				<available file="${launch4j.directory}/bin/linux-armhf" type="dir" />
			</and>
		</condition>
		<condition property="launch4j.bindir" value="${launch4j.directory}/bin/linux-aarch64">
			<and>
				<os name="linux" />
				<os arch="aarch64" />
				<available file="${launch4j.directory}/bin/linux-aarch64" type="dir" />
			</and>
		</condition>

		<echo level="info" message="launch4j.bindir: ${launch4j.bindir}" />

		<chmod perm="+x" file="${launch4j.bindir}/ld" failonerror="false" failifexecutionfails="false" ignoremissing="true" />
		<chmod perm="+x" file="${launch4j.bindir}/windres" failonerror="false" failifexecutionfails="false" ignoremissing="true" />

		<mkdir dir="${project.build.directory}/launch4j" />
		<launch4j bindir="${launch4j.bindir}">
			<config outfile="${project.build.directory}/launch4j/${windows.gui.exeFileName}" jarpath="${windows.build.finalName}.${project.packaging}" headertype="gui" dontwrapjar="${launch4j.dontWrapJar}" stayalive="${launch4j.stayAlive}" restartoncrash="${launch4j.restartOnCrash}" priority="${launch4j.priority}" errtitle="${launch4j.errTitle}" chdir="." icon="${project.build.iconsSourceDirectory}/windows/${windows.build.finalName}.ico">
				<singleInstance mutexname="${mainClass}" windowtitle="${project.name}" />
				<jre runtimebits="${launch4j.jre.runtimeBits}" minversion="${maven.compiler.target}.0" jdkpreference="${launch4j.jdkPreference}" initialheapsize="${gui.vm.initialHeapSize}" maxheapsize="${gui.vm.maxHeapSize}">
					<opt>-DG</opt>
				</jre>
				<versionInfo fileversion="${project.version}.0" txtfileversion="${project.version}" filedescription="${project.name}" copyright="${launch4j.copyright}" productversion="${project.version}.0" txtproductversion="${project.version}" productname="${project.name}" internalname="${project.artifactId}" originalfilename="${windows.gui.exeFileName}" companyname="${launch4j.companyName}" />
			</config>
		</launch4j>
		<launch4j bindir="${launch4j.bindir}">
			<config outfile="${project.build.directory}/launch4j/${windows.cli.exeFileName}" jarpath="${windows.build.finalName}.${project.packaging}" headertype="console" dontwrapjar="${launch4j.dontWrapJar}" stayalive="${launch4j.stayAlive}" restartoncrash="${launch4j.restartOnCrash}" priority="${launch4j.priority}" errtitle="${launch4j.errTitle}" chdir=".">
				<jre minversion="${maven.compiler.target}.0" jdkpreference="${launch4j.jdkPreference}" initialheapsize="${cli.vm.initialHeapSize}" maxheapsize="${cli.vm.maxHeapSize}">
					<opt>-DC</opt>
				</jre>
				<versionInfo fileversion="${project.version}.0" txtfileversion="${project.version}" filedescription="${project.name}" copyright="${launch4j.copyright}" productversion="${project.version}.0" txtproductversion="${project.version}" productname="${project.name}" internalname="${project.name}" originalfilename="${windows.cli.exeFileName}" companyname="${launch4j.companyName}" />
			</config>
		</launch4j>
	</target>

	<target name="innosetup">
		<for trim="true" list="${build.platforms.windows}" param="platform" parallel="${build.parallel}">
			<sequential>
				<unzip src="${project.build.basedir}/${project.artifactId}-${project.version}-@{platform}-bin.zip" dest="${project.build.basedir}/@{platform}/innosetup" />
			</sequential>
		</for>

		<echo file="${project.build.basedir}/win32-win32-x86/innosetup/${project.artifactId}.iss">
			[Setup]
			AppName=${project.name}
			AppVersion=${project.version}
			VersionInfoVersion=${project.version}
			AppId=${innoSetup.AppId.x86}
			AppPublisherURL=${innoSetup.AppPublisherURL}
			AppSupportURL=${innoSetup.AppSupportURL}
			AppUpdatesURL=${innoSetup.AppUpdatesURL}
			AppMutex=${mainClass}
			TimeStampsInUTC=yes
			PrivilegesRequired=lowest
			PrivilegesRequiredOverridesAllowed=dialog
			DefaultDirName={autopf32}\${project.name}
			DefaultGroupName=${project.name}
			UninstallDisplayIcon={app}\${windows.gui.exeFileName}
			Compression=lzma2
			SolidCompression=yes
			CloseApplications=no
			ArchitecturesAllowed=x86

			[Languages]
			Name: "English"; MessagesFile: "compiler:Default.isl"; LicenseFile: "${project.name}\LICENSE.txt"
			Name: "Italiano"; MessagesFile: "compiler:Languages\Italian.isl"; LicenseFile: "${project.name}\LICENSE.txt"

			[Run]
			Filename: "{app}\${windows.gui.exeFileName}"; Description: "{cm:LaunchProgram,${project.name}}"; Flags: nowait postinstall skipifsilent

			[Tasks]
			Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked

			[Icons]
			Name: "{group}\${project.name}"; Filename: "{app}\${windows.gui.exeFileName}"
			Name: "{group}\{cm:UninstallProgram,${project.name}}"; Filename: "{uninstallexe}"
			Name: "{autodesktop}\${project.name}"; Filename: "{app}\${windows.gui.exeFileName}"; Tasks: desktopicon

			[Files]
			Source: "${project.name}\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs
			Source: "${innoSetup.dependencies.logFileName}"; DestDir: "{autoappdata}\${project.name}"; Flags: ignoreversion overwritereadonly uninsremovereadonly; Attribs: hidden readonly

			[Code]
			procedure CurStepChanged(CurStep: TSetupStep);
			var
				jarFileNames: TArrayOfString;
				i: Integer;
			begin
				if (CurStep = ssInstall) and (LoadStringsFromFile(ExpandConstant('{autoappdata}\${project.name}\${innoSetup.dependencies.logFileName}'), jarFileNames)) then
				begin
					for i := 0 to GetArrayLength(jarFileNames) - 1 do
						DeleteFile(ExpandConstant('{app}\${dependencies.directory}\' + jarFileNames[i]));
				end;
			end;
		</echo>

		<echo file="${project.build.basedir}/win32-win32-x86_64/innosetup/${project.artifactId}.iss">
			[Setup]
			AppName=${project.name}
			AppVersion=${project.version}
			VersionInfoVersion=${project.version}
			AppId=${innoSetup.AppId.x64}
			AppPublisherURL=${innoSetup.AppPublisherURL}
			AppSupportURL=${innoSetup.AppSupportURL}
			AppUpdatesURL=${innoSetup.AppUpdatesURL}
			AppMutex=${mainClass}
			TimeStampsInUTC=yes
			PrivilegesRequired=lowest
			PrivilegesRequiredOverridesAllowed=dialog
			DefaultDirName={autopf64}\${project.name}
			DefaultGroupName=${project.name}
			UninstallDisplayIcon={app}\${windows.gui.exeFileName}
			Compression=lzma2
			SolidCompression=yes
			CloseApplications=no
			ArchitecturesAllowed=x64
			ArchitecturesInstallIn64BitMode=x64

			[Languages]
			Name: "English"; MessagesFile: "compiler:Default.isl"; LicenseFile: "${project.name}\LICENSE.txt"
			Name: "Italiano"; MessagesFile: "compiler:Languages\Italian.isl"; LicenseFile: "${project.name}\LICENSE.txt"

			[Run]
			Filename: "{app}\${windows.gui.exeFileName}"; Description: "{cm:LaunchProgram,${project.name}}"; Flags: nowait postinstall skipifsilent

			[Tasks]
			Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked

			[Icons]
			Name: "{group}\${project.name}"; Filename: "{app}\${windows.gui.exeFileName}"
			Name: "{group}\{cm:UninstallProgram,${project.name}}"; Filename: "{uninstallexe}"
			Name: "{autodesktop}\${project.name}"; Filename: "{app}\${windows.gui.exeFileName}"; Tasks: desktopicon

			[Files]
			Source: "${project.name}\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs
			Source: "${innoSetup.dependencies.logFileName}"; DestDir: "{autoappdata}\${project.name}"; Flags: ignoreversion overwritereadonly uninsremovereadonly; Attribs: hidden readonly

			[Code]
			procedure CurStepChanged(CurStep: TSetupStep);
			var
				jarFileNames: TArrayOfString;
				i: Integer;
			begin
				if (CurStep = ssInstall) and (LoadStringsFromFile(ExpandConstant('{autoappdata}\${project.name}\${innoSetup.dependencies.logFileName}'), jarFileNames)) then
				begin
					for i := 0 to GetArrayLength(jarFileNames) - 1 do
						DeleteFile(ExpandConstant('{app}\${dependencies.directory}\' + jarFileNames[i]));
				end;
			end;
		</echo>

		<for trim="true" list="${build.platforms.windows}" param="platform" parallel="${build.parallel}">
			<sequential>
				<pathconvert pathsep="&#13;&#10;" property="dependencies.log.@{platform}">
					<fileset dir="${project.build.basedir}/@{platform}/innosetup/${project.name}/${dependencies.directory}">
						<include name="*.jar" />
					</fileset>
					<mapper>
						<flattenmapper />
					</mapper>
				</pathconvert>

				<echo file="${project.build.basedir}/@{platform}/innosetup/${innoSetup.dependencies.logFileName}">${dependencies.log.@{platform}}</echo>
			</sequential>
		</for>

		<condition property="wine.failonerror" else="false">
			<isfalse value="${ignoreWineErrors}" />
		</condition>
		<condition property="wine.failifexecutionfails" else="false">
			<isfalse value="${ignoreWineErrors}" />
		</condition>

		<for trim="true" list="${build.platforms.windows}" param="platform" parallel="false">
			<sequential>
				<exec osfamily="windows" executable="${innoSetup.directory}/ISCC.exe" failonerror="true">
					<arg value="${project.build.basedir}/@{platform}/innosetup/${project.artifactId}.iss" />
					<arg value="/O${project.build.basedir}" />
					<arg value="/F${project.artifactId}-${project.version}-@{platform}-setup" />
				</exec>
				<exec osfamily="unix" executable="wine" failonerror="${wine.failonerror}" failifexecutionfails="${wine.failifexecutionfails}">
					<arg value="${innoSetup.directory}/ISCC.exe" />
					<arg value="${project.build.basedir}/@{platform}/innosetup/${project.artifactId}.iss" />
					<arg value="/O${project.build.basedir}" />
					<arg value="/F${project.artifactId}-${project.version}-@{platform}-setup" />
				</exec>
			</sequential>
		</for>
	</target>

	<target name="checksums">
		<property name="checksums.file" value="${project.build.basedir}/checksums.md" />
		<property name="checksums.directory" value="${project.build.basedir}/checksums" />
		<delete file="${checksums.file}" />
		<checksum algorithm="SHA-256" todir="${checksums.directory}" forceoverwrite="yes" fileext=".sha256" pattern="* {1}&#13;&#10;[`{0}`](https://www.virustotal.com/it/file/{0}/analysis/)">
			<fileset dir="${project.build.basedir}">
				<include name="*" />
			</fileset>
		</checksum>
		<echo file="${checksums.file}" message="### Checksums SHA-256&#13;&#10;" />
		<concat destfile="${checksums.file}" append="true">
			<fileset dir="${checksums.directory}" />
		</concat>
		<loadfile property="checksums.file.contents" srcFile="${checksums.file}" />
		<echo level="info" message="${checksums.file.contents}" />
		<delete dir="${checksums.directory}" />
	</target>

</project>
